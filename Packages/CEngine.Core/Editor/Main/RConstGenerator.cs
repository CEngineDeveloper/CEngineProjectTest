using System.IO;
using System.Text;
#if UNITY_EDITOR
using UnityEditor;
#endif
using UnityEngine;
using System.Text.RegularExpressions;
using System.Linq;
using System.Collections.Generic;
using static UnityEditor.Experimental.GraphView.GraphView;

namespace CYM
{

    public static class RConstGenerator
    {

        //[MenuItem ("Tools/GenConst/Regenerate")]
        public static void WriteCodeFile()
        {
            HashSet<string> sortLayerHashSet = new HashSet<string>();
            HashSet<string> tagHashSet = new HashSet<string>();
            HashSet<string> layerHashSet = new HashSet<string>();
            // the path we want to write to
            var path = string.Concat(Application.dataPath, Path.DirectorySeparatorChar, $"{SysConst.Dir_Funcs}/{SysConst.Dir_Main}/RConst.cs");
            if (File.Exists(path))
            {
                File.Delete(path);
            }

            try
            {
                // opens the file if it allready exists, creates it otherwise
                using (FileStream stream = File.Open(path, FileMode.OpenOrCreate, FileAccess.Write))
                {
                    using (StreamWriter writer = new StreamWriter(stream))
                    {
                        var assetsDirectory = new DirectoryInfo(Application.dataPath);

                        StringBuilder builder = new StringBuilder();
                        builder.AppendLine("// ----- Generated by CYM ----- //");
                        builder.AppendLine("using UnityEngine;\n");
                        builder.AppendLine($"namespace {BuildConfig.NameSpace}" + " {");

                        builder.AppendLine("\tpublic static class CTag {");
                        var tags = UnityEditorInternal.InternalEditorUtility.tags;
                        tags.ToList().Sort();
                        foreach (var tag in tags)
                        {
                            if (tagHashSet.Contains(tag))
                                continue;
                            tagHashSet.Add(tag);
                            builder.AppendFormat("\t\tpublic static readonly string {0} = \"{1}\";\n", tag, tag);
                        }
                        builder.AppendLine("\t}\n");

                        builder.AppendLine("\tpublic static class CLayer {");
                        foreach (var layer in UnityEditorInternal.InternalEditorUtility.layers)
                        {
                            if (layerHashSet.Contains(layer))
                                continue;
                            layerHashSet.Add(layer);
                            builder.AppendFormat("\t\tpublic static readonly string {0} = \"{1}\";\n", SanitizedCSharpName(layer), layer);
                            builder.AppendFormat("\t\tpublic static readonly LayerMask {0} = 1 << {1};\n", SanitizedCSharpName(layer + "Mask"), LayerMask.NameToLayer(layer));
                        }
                        builder.AppendLine("\t}\n");


                        builder.AppendLine("\tpublic static class CSortingLayer {");
                        var allSortingLayerNames = SortingLayer.layers.Select(layer => layer.name).ToArray();
                        foreach (var sortingLayer in allSortingLayerNames)
                        {
                            if (sortLayerHashSet.Contains(sortingLayer))
                                continue;
                            sortLayerHashSet.Add(sortingLayer);
                            builder.AppendFormat("\t\tpublic static readonly string {0} = \"{1}\";\n", SanitizedCSharpName(sortingLayer), sortingLayer);
                        }
                        var sanitizedNames = allSortingLayerNames.Select(layer => SanitizedCSharpName(layer)).ToArray();
                        builder.AppendLine("\t\tpublic static readonly string[] All = new string[]{ " + string.Join(", ", sanitizedNames) + " };");
                        builder.AppendLine("\t}\n");
                        builder.AppendLine("}");

                        writer.Write(builder.ToString());
                    }
                }
            }
            catch (System.Exception e)
            {
                Debug.LogException(e);
                // if we have an error, it is certainly that the file is screwed up. Delete to be safe
                if (File.Exists(path)) File.Delete(path);
            }

            AssetDatabase.Refresh(); // force compile
        }

        static string SanitizedCSharpName(string input)
        {
            var results = Regex.Split(input, @"[\p{P}\p{Z}\p{S}]");
            var result = results.Aggregate("", (acc, x) => acc + x);
            result = Regex.Replace(result, "^[0-9]+", "");
            return result;
        }
    }
}

